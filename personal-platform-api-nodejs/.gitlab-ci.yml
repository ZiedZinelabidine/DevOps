stages:
  - deploy
  - active-env
  - stop-env

before_script:
  - apk add --no-cache curl jq python3 py3-pip
  - pip install awscli
  - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
  - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
  - aws configure set region "$AWS_DEFAULT_REGION"
  - cp $ENV .env

active-env-staging:
  stage: active-env
  image: docker:stable
  services:
    - docker:dind
  script:
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_PGSQL    --force-new-deployment   --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_MONGODB  --force-new-deployment   --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_API_ITG  --force-new-deployment   --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_FRONT_ITG --force-new-deployment  --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_API_CHAT  --force-new-deployment  --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_GEN_INV   --force-new-deployment  --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_BACK_CHAT --force-new-deployment  --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_DATEWITH_TECH --force-new-deployment  --desired-count 1 --region eu-west-1

  only:
    - develop
  when: manual  
  environment:
    name: staging 

deploy-staging:
  stage: deploy
  image: docker:stable
  services:
    - docker:dind
  script:
    - aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY
    - docker build -t $TAG .
    - docker push $TAG
   # - aws ecs update-service --cluster $CLUSTER --service $SERVICE_API_ITG --force-new-deployment --region eu-west-1
  only:
    - develop
  environment:
    name: staging    

stop-env-staging:
  stage: stop-env
  image: docker:stable
  services:
    - docker:dind
  script:
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_API_ITG    --desired-count 0 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_FRONT_ITG  --desired-count 0 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_API_CHAT   --desired-count 0 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_PGSQL      --desired-count 0 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_MONGODB    --desired-count 0 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_GEN_INV    --desired-count 0 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_BACK_CHAT  --desired-count 0 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_DATEWITH_TECH  --desired-count 0 --region eu-west-1

  only:
    - develop
  when: manual   
  environment:
    name: staging 

active-env-prod:
  stage: active-env
  image: docker:stable
  services:
    - docker:dind
  script:
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_PGSQL    --force-new-deployment   --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_MONGODB  --force-new-deployment   --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_API_ITG  --force-new-deployment   --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_FRONT_ITG --force-new-deployment  --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_API_CHAT  --force-new-deployment  --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_GEN_INV   --force-new-deployment  --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_BACK_CHAT --force-new-deployment  --desired-count 1 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_DATEWITH_TECH --force-new-deployment  --desired-count 1 --region eu-west-1

  only:
    - main
  when: manual  
  environment:
    name: production 

deploy-prod:
  stage: deploy
  image: docker:stable
  services:
    - docker:dind
  script:
    - aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY
    - docker build -t $TAG .
    - docker push $TAG
  only:
    - main
  environment: 
    name: production

stop-env-prod:
  stage: stop-env
  image: docker:stable
  services:
    - docker:dind
  script:
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_API_CHAT  --force-new-deployment  --desired-count 0 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_GEN_INV   --force-new-deployment  --desired-count 0 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_BACK_CHAT --force-new-deployment  --desired-count 0 --region eu-west-1
    - aws ecs update-service --cluster $CLUSTER --service $SERVICE_DATEWITH_TECH  --desired-count 0 --region eu-west-1

  only:
    - main
  when: manual   
  environment:
    name: production